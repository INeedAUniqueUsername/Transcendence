<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

	<Type unid="&unidTradingComputer;">
		<Language>
			<Text id="descTradeRecommendationLocal">
				Trade computer: Sell to %objName% in this system for %localPrice%.
			</Text>
			<Text id="descTradeRecommendationOtherSystem">
				Trade computer: Sell in the %systemName% System for %otherSystemPrice%.
			</Text>
			<Text id="descTradeRecommendationBoth">
				Trade computer: Sell in the %systemName% System for %otherSystemPrice% or to %objName% in this system for %localPrice%.
			</Text>
			<Text id="currencyConversion">
				%currency1% (%currency2%)
			</Text>
		</Language>
	</Type>

<!-- CODE -->

	<Globals>
		(block Nil
			(setq rpgTradeComputerNodes (lambda ()
				(or
					(scrGetData gScreen 'rpg.tradeComputerNodes)
					(block (
						;	Make a list of all nodes that the trade computer checks. We 
						;	check all known nodes that are within 3 gates of the current
						;	node.

						(nodes
							(map (sysGetNodes) 'excludeNil theNode
								(block (dist)
									(if (and (sysIsKnown theNode)
											(!= theNode (sysGetNode))
											(setq dist (sysGetTopologyDistance (sysGetNode) theNode))
											(leq dist 3)
											)
										{
										nodeID: theNode
										distance: dist
										})
									)
								)
							)
						)

						;	Cache in screen data

						(scrSetData gScreen 'rpg.tradeComputerNodes nodes)

						;	Done

						nodes
						)
					)
				))

			(setq rpgItemTradeComputer (lambda (theItem priceToBeat priceToBeatCurrency)
				(switch
					;	If we don't have a trade computer, then nothing to do

					(!= (objGetEquipmentStatus gPlayerShip 'TradingComputer) 'ready)
						Nil

					;	If this item is unknown, then no recommendation

					(not (itmIsKnown theItem))
						Nil

					;	Make a recommendation

					(block (
						(itemCurrency (itmGetProperty theItem 'currency))
						(minPrice (ecoExchange (or priceToBeat 0) (or priceToBeatCurrency itemCurrency) itemCurrency))
						tempPrice

						(nodesToCheck (rpgTradeComputerNodes))

						(priceData
							(map nodesToCheck 'excludeNil theData 
								(if (gr (setq tempPrice (sysGetItemBuyPrice (@ theData 'nodeID) theItem "* -blackMarket;")) minPrice) {
									nodeID: (@ theData 'nodeID)
									distance: (@ theData 'distance)
									price: tempPrice
									})
								)
							)
						(bestOtherSystemPrice 
							(map priceData '(reduceMax excludeNil) theData 
								(@ theData 'price)
								)
							)
						(bestNodesToSellAt 
							(map priceData 'excludeNil theData 
								(if (= (@ theData 'price) bestOtherSystemPrice) 
									theData
									)
								)
							)
						(nearestNodeToSellAt (@
							(map bestNodesToSellAt '(reduceMin original) theData
								(@ theData 'distance)
								)
							'nodeID
							))

						(knownObjs (sysFindObject gPlayerShip "sTAFV +property:known; -blackMarket;"))
						(localPriceData
							(map knownObjs 'excludeNil theObj 
								(if (gr (setq tempPrice 
											(ecoExchange (objGetBuyPrice theObj theItem 'noDonations)
												(objGetProperty theObj 'currency)
												itemCurrency
												)
											)
										minPrice
										)
									{
										theObj: theObj
										priceItemCurrency: tempPrice
										distance: (objGetDistance theObj gPlayerShip)
									})
								)
							)
						(bestLocalPriceItemCurrency (map localPriceData 'reduceMax theData (@ theData 'priceItemCurrency)))
						(localBestObjsToSellAt
							(filter localPriceData theData
								(= (@ theData 'priceItemCurrency) bestLocalPriceItemCurrency)
								)
							)
						(bestObjToSellAt (@
							(map localBestObjsToSellAt '(reduceMin original) theData
								(@ theData 'distance)
								)
							'theObj
							))
						(sellLocalPrice (objGetBuyPrice bestObjToSellAt theItem 'noDonations))
						(sellLocalCurrency (objGetProperty bestObjToSellAt 'currency))
						
						(translateData {
							objName: (objGetName bestObjToSellAt 'article)
							localPrice:
								(if (= itemCurrency sellLocalCurrency)
									(fmtCurrency sellLocalCurrency sellLocalPrice)
									(typTranslate &unidTradingComputer; 'currencyConversion {
										currency1: (fmtCurrency sellLocalCurrency sellLocalPrice)
										currency2: (fmtCurrency itemCurrency bestLocalPriceItemCurrency)
										})
									)
							systemName: (sysGetName nearestNodeToSellAt)
							otherSystemPrice: (fmtCurrency itemCurrency bestOtherSystemPrice)
							})
							
						(sellCurrency itemCurrency)
						(sellPrice bestOtherSystemPrice)
						sellRecommendationID
						
						)
						(switch
							(and (gr bestLocalPriceItemCurrency 0) (geq bestLocalPriceItemCurrency bestOtherSystemPrice))
								(block Nil
									(setq sellRecommendationID 'descTradeRecommendationLocal)
									(setq sellCurrency sellLocalCurrency)
									(setq sellPrice sellLocalPrice)
									)
							
							(gr bestLocalPriceItemCurrency 0)
								(setq sellRecommendationID 'descTradeRecommendationBoth)
								
							(gr bestOtherSystemPrice 0)
								(setq sellRecommendationID 'descTradeRecommendationOtherSystem)
							)
						
						(if sellRecommendationID
							{
								sellBestSystem: nearestNodeToSellAt
								sellBestSystemPrice: bestOtherSystemPrice

								sellLocalRecommendation:
									(typTranslate &unidTradingComputer; 'descTradeRecommendationLocal translateData)

								sellLocalObj: bestObjToSellAt
								sellLocalPrice: sellLocalPrice
								sellLocalCurrency: sellLocalCurrency

								sellRecommendation:
									(typTranslate &unidTradingComputer; sellRecommendationID translateData)

								sellPrice: sellPrice
								sellCurrency: sellCurrency
								}
							)
						)
					)
				))
			)
	</Globals>
	
</TranscendenceModule>
